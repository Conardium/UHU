/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package proyecto3;

import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 *
 * @author ismae
 */
public class Generador extends java.awt.Frame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, ExecutionException {

        Taller taller = new Taller();
        Thread[] camiones = new Thread[10];

        Random rnd = new Random();
        rnd.setSeed(System.currentTimeMillis());
        
        ExecutorService thpCoches = Executors.newFixedThreadPool(3);

        Future<Integer>[] fc = new Future[10];
        int coches = 0;
        int nCamionesCreados = 0;
        
        for (int i = 0; i < 10; i++) {
            if (rnd.nextInt(10) < 7) {
                fc[coches] = thpCoches.submit(new Coche(taller));
                coches++;
            } else {
                camiones[nCamionesCreados] = new Camion(taller);
                camiones[nCamionesCreados].start();
                nCamionesCreados++;
            }          
            Thread.sleep((rnd.nextInt(2) + 1) * 1000);
        }

        for (int i = 0; i < nCamionesCreados; i++) {
            camiones[i].join();
        }
        
        int tiempoTotalCoches = 0;
        int tiempoIndividual = 0;
        
        for (int i = 0; i < coches; i++) {
            tiempoIndividual = fc[i].get();
            System.out.println("===> El coche " + i + " ha tardado " + tiempoIndividual/1000 + "s");
            tiempoTotalCoches+=tiempoIndividual;
        }
        
        System.out.println("### El tiempo total de atencion a los coches es de: " + tiempoTotalCoches/1000 + "s ###");

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
